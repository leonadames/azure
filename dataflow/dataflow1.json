{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Dataset_Order",
						"type": "DatasetReference"
					},
					"name": "LeerDatasetOrder"
				},
				{
					"dataset": {
						"referenceName": "Dataset_Order_Line",
						"type": "DatasetReference"
					},
					"name": "LeerDatasetOrderLine",
					"description": "Import data from Dataset_Order_Line"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Dataset_Order_Filtrado_Output",
						"type": "DatasetReference"
					},
					"name": "sinkorderfiltradooutput",
					"description": "salida del archivo order filtrado por ciudades principales"
				},
				{
					"dataset": {
						"referenceName": "Orderline_Filtrado",
						"type": "DatasetReference"
					},
					"name": "sink1orderlinefiltrado"
				}
			],
			"transformations": [
				{
					"name": "FiltroCiudadesPrincipales"
				},
				{
					"name": "FiltrarProductValue",
					"description": "Traer los registro que tengan un valor mayor a 0"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Nombre_Order_Filtrado as string ('Order_Filtrado.txt'),",
				"     Nombre_OrderLine_Filtrado as string ('OrderLine_Filtrado')",
				"}",
				"source(output(",
				"          orderIdentifier as string,",
				"          orderType as string,",
				"          {vendor.organizationIdentifier} as string,",
				"          {buyer.organizationIdentifier} as string,",
				"          {shipFromInstructionLocation.locationIdentifier} as string,",
				"          {shipToLocation.locationIdentifier} as string,",
				"          orderStatus as string,",
				"          createdDate as string,",
				"          requestedShipDate as string,",
				"          requestedDeliveryDate as string,",
				"          plannedShipDate as string,",
				"          plannedDeliveryDate as string,",
				"          quantity as string,",
				"          quantityUnits as string,",
				"          totalValue as string,",
				"          orderValueCurrency as string,",
				"          lineCount as string,",
				"          totalShippedQuantity as string,",
				"          exclude as string,",
				"          sourceLink as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LeerDatasetOrder",
				"source(output(",
				"          orderIdentifier as integer,",
				"          orderLineNumber as short,",
				"          orderType as string,",
				"          {product.partNumber} as string,",
				"          {shipFromInstructionLocation.locationIdentifier} as string,",
				"          {shipToLocation.locationIdentifier} as string,",
				"          status as string,",
				"          createdDate as string,",
				"          requestedShipDate as string,",
				"          requestedDeliveryDate as string,",
				"          plannedShipDate as string,",
				"          plannedDeliveryDate as string,",
				"          quantity as short,",
				"          quantityUnits as string,",
				"          productValue as short,",
				"          value as integer,",
				"          valueCurrency as string,",
				"          shipmentCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LeerDatasetOrderLine",
				"LeerDatasetOrder filter({shipToLocation.locationIdentifier}=='FAA - Washington' || {shipToLocation.locationIdentifier}=='MAHD - Boston') ~> FiltroCiudadesPrincipales",
				"LeerDatasetOrderLine filter(productValue>0) ~> FiltrarProductValue",
				"FiltroCiudadesPrincipales sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($Nombre_Order_Filtrado)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          orderIdentifier,",
				"          orderType,",
				"          vendor_organizationIdentifier = {vendor.organizationIdentifier},",
				"          buyer_organizationIdentifier = {buyer.organizationIdentifier},",
				"          locationIdentifier = {shipToLocation.locationIdentifier}",
				"     ),",
				"     partitionBy('hash', 1)) ~> sinkorderfiltradooutput",
				"FiltrarProductValue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($Nombre_OrderLine_Filtrado)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          orderIdentifier,",
				"          orderLineNumber,",
				"          orderType,",
				"          partNumber = {product.partNumber},",
				"          createdDate,",
				"          quantity,",
				"          productValue,",
				"          value,",
				"          valueCurrency",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1orderlinefiltrado"
			]
		}
	}
}